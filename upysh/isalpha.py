# generated by ./gen_blk.py
# sys.getsizeof(ISALPHA)=6232
# empty/full/other blocks: (339, 353, 76)
#
import sys

if sys.implementation.name=='micropython':
    import utime
    def ticks_ms():  return utime.ticks_ms()
else:
    import time
    def ticks_ms():  return 1000*time.time()

ISALPHA=[115565932812971906077374088802131999797073315055648858838604416377493060059136, True, 552975467735054704045497987758998679938929514248499406466828171099504639, 115679011025170378826477653962794350969188673866142282464284155128498926649344, 115792089237316195423570985008687907506181970406283331306815484427509553954815, 12423143423811638678052259041559990631058590126225045952807776803945971711, 70562132102462766475635031223334059021048493903401959689290013803612255289344, 1894115267413195898071609018360917722607394540086253728761166446824422965248, 11968236908102763997169975714083642843909663636848639, 5300640609241333018728097628614218586111534968164935100085544214914400240, 80880251378472242311277928758325007873206826801250448657139396872160, 411376237388726193204777340693113113426050158482476631399702496, 10601170008496975098263305381256924069937394221172865194988932201336135648, 798368493845588261699897923952838921476071037637652991827936, 25274950597564361092624932826899439859366747197947535345976294244350, 2700480864533604753357453524917881212502017, 112173586448649705567666010906125899929034551603227172247260237914574669479935, True, 115792089237263538056821837374196524471176040916337755865411945508260190093311, 56539106072908298546665518562294055580492730201013926277077180264954593279, 115792089237316195423570985008687907853269984665640564039457584007913129639934, True, 55213970774324510299476631068504699023092829697267374806818534214074367, 1737652812532726076056513345298647848845367345801676464812221259775, 113078212145816597093237503942757606887240794645592223616054016824194367488, 1594383846774527620521328746349396234036867728760514344386559, 187072209578355573530071697273310454184088669519871, 1725436586697542938982725030042801211351596382958281163214220622299104, 176450047102047553789556968374974432802435643711505836305935528757943074815, 6277101735386680763835789423207666416102355444464034512895, True, 14410625490920543657234264720186694616501234044342649299137453326709465022463, 182665404091315902206505369758207093804028133376, 8166776806102523443669197582762222025860, False, False, False, False, False, False, False, False, False, False, 22031237057248828429965170056871049872405496188175313925265863103634997247, 13427110693051495112697365115086184816095739990943694166193403330559, 140737488355328, False, 112173586448650064316584391725525075886243443781622267548322468446383732949088, 115790322390251417039437561138956508221665721948326813931145513821294949302240, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 6129982163463555433433388108601236734474956488734408703, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 51422017416287688817342786954917203280710495801049370729644031, True, True, True, True, 28948022309328637479753415950661441008615006645111788017862771688057633505279, True, 1725436586697640946857233172922526145446785751389421833982177659789311, 115339776388732929035197663840191917468453283985080472080299623090470611058688, 4063748248990283958043116747249578473900524918907056616233424316270053947323, 205688070431398525702310175016267377571728940860296705869872128, 49526910722110784942421038115567651559921492388072513387502621008515301375, 215679573330928016621949439932321255965889488964222224544548293344894, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 7237005577332250161937758863028649755354480777452776765080197772848090054655, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, 421249166674228746791672110734677835052936480481475047144996995071, 115792089237312904414456725720488814387119459551387386144346573500269729415295, True, 7235238730267485436581647524532459962040043306998836339634945303390848024575, 14474011154664524427946373126085988481658576737408738855620456494610276941824, 3052817487186178658883797276627984514586454170878809764634160005120, 3618502788666131106986593281521497120074404653900135296698688118921535418367, False, 822752278660601742263551586456254903328675842694540300965117952, 409869634913807611029193367718212212603750253087013282168963071, 365375409332725729550921208179070754913983135743, False, False, False, 77371244510986524499639615, 4732346230193864794270293252919216295551580032243056246783, 42535295785889145418661991935036555265, 41538295717487340790512969070936063, 9444732965739290427391, False, False, False, 13803492282204988340348972489927086654025913387843423753299417639157752, 188313818309370855856780602934376059929955475844577737310200, False, False, False, False, 2993155353253348894114225598939484249647918079803392, False, False, False, False, False, False, False, False, False, True, True, True, 2596148429267413814265248164610047, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, 140737488355327, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, 144115188075855871, False, False, False, False, 1461323231369314673218553756486217257751765057535, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, 3, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, 115792089237316195322646946095942657534798514674553687295163319231811575349247, 115792089237316195423570985008687907853269984665640561604477854675838770866111, 112173586447807565970681730482201390616180995044765314936289090954764239241215, 25660791893512462124073060293492984751510567618820308293648383, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, 392317335668304952608886359756720284316824500695881220079, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 52656145834278593348959013841835216159447547700274555627155488767, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 115792089237316195423570985008687907853269984665640564039439146271038674829311, 1073741823, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, 1073741823, False, False, False, False, False]

def _(i):
    if i>=0x030000:
        return False
    else:
        b = i//256
        if type(ISALPHA[b])==type(True):
            return ISALPHA[b]
        else:
            return ISALPHA[b] & (1<<(i%256)) != 0


def isalpha(str):
    for c in str:
        if not(_(ord(c))):
            return False

    return True


def tst(strt,len):
    start = ticks_ms()
    c=0
    for i in range(strt,strt+len,1):
        if isalpha(chr(i)):
            c=c+1
    return c
    end = ticks_ms()
    return (c, end-start, (end-start)/len)


def tst_(strt,len):
    start = ticks_ms()
    c=0
    for i in range(strt,strt+len,1):
        if _(i):
            c=c+1
    end = ticks_ms()
    return (c, end-start, (end-start)/len)


def tstPlanes(fulltest=True):
    return tst_(0, 1+(0x10ffff if fulltest else 0x02ffff))


