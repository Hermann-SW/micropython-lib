# generated by ./gen_blk_wc.py
# sys.getsizeof(ISWORD)=6232
# empty/full/other blocks: (330, 362, 76)
#
import sys

if sys.implementation.name=='micropython':
    import utime
    def ticks_ms():  return utime.ticks_ms()
else:
    import time
    def ticks_ms():  return 1000*time.time()

ISWORD=[115792089237316195423570985007226406216109222930897348438472988291964491268096, True, True, 115792089237316195423570985002841897814176571351154057912335453991609665847295, 115792089237316195423570985008687907809713841699760440716145634256646798573567, 54827472978494469526095658049621498156329074207029453932550783188617658367, 115792089237316195423570985008687907853269984665600949958200451839111257391055, 3618502788666131100709874670020032828793487184350388674089803151692311543807, False, 3618501486216559339645424606241682539375417397324629514576331238928495411198, 5299220157455852998910780379333982631642217889452965525512512655043692526, 3618501063282711208489085184270985979588562182104857510970574279435106230254, 12366615195640205084818174847231098053946083844243323416942613331332423662, 49471744707722784137129613795712538845359013148628945640208109592601550828, 5475929625518285077002824579479052653551716228997785252959218565118, 13112613656515643719357417474573011395584783278624593043349569535, 14474011154664113453541553888980479178604201459415486818848659218989653688319, 1809251394333065553493296278308342502143419795848419158260489086930499141631, 115792089237263538056821837374196524471176040916337755865411945508260190093311, 56539106072908298546665518585107717961124853500308192745786111217771610111, 115792089237316195423570985008687907853269984665640564039457584007913129639934, True, 3533694129556768659166593722671903687214794521542540299198258870248013823, 1807512134033714331055883236283193434188392501830553446349604467588605140991, 2993155353253350223342221383855357153454974132240383, 115792089230997052975070306256869762126253309489770985277044508492430697299967, 3489660927, 98058762527944110812951770656035678219820846153165963263, 340282366920938331236608683923436732415, 86844070378860319962960132473893862028465214724784909114786465587196959129599, True, 57834204969686111337994987108689887484734425261350884082087050487845911265279, 3533694129145392525966274193611486312237428505126619754717746810132101248, 115792089237316195423570985008687885726749357998537907334506373062212724981759, True, 6901746346790563787434755862277025452451108972170386555162524223799295, 115792089237316195423570985008687907853269984665561335914703804789752793661439, True, 100433627765090765993374453582669899033100474846682602799103, 115792089237315822610806070274274342251168548547920979721183275044741255787486, True, True, True, 37627816135505333062729727, 114887518754120436971334636166354431789114715551784848032309471137440682999807, 115792089223783359449471840326718257881336538792887352405121952839308356354047, 28269553036454149273332759989050732829662017332138864355379732556743180287, 7235238730293811902560742562216730829234464165785383407358114672106855727103, 115792089237316195423570985008679344367113748906354214323622440293021123608574, 115790322390251828409128150205964865984575141383285101867442278361406615060448, 57896044618658097711785492504343953926634992332820280811098120294504595455999, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 115792089237316195417300013255464690644867628630541498860089703519937829535743, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 392318858461667547739736838950479151006397215279002157055, True, True, True, True, 803469022129495118257828997456286052417348008324080099917823, True, 5708990749639268103726559592153816260157636607, 112173586448650064316584391727166413520448447461167189105189318588711032586239, 421146523506651703787821867567080298589190728277051042271877660671, 39633424070246002863567273983, 75513435683632770520274960383, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 23384026197294446691258957323460528314494920687615, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 421249166674228746791672110734676699237998675987931094992692445183, 115792089237312904414456725720488814387119459551387386144346573502469826412671, True, 28946255462264272078501207213661442684528165431806442097047077362929841995775, 72370055773322622139731865630429942408293569384606360060543582871786390290431, 28044276560914602696064534727380825193567365773621212096800818005126265438206, 3618502788666131106986593281521497120074404653900135296698688118921535418367, 28948022309328637479753415950752760469508127184630457265215647142443340529543, 822752278660601742263551586456254903328675842694540300965117952, 26326566412722803505720776658447941767924275421316825648300294143, 1495481550398846411051920505076936599862932974600191, False, False, False, 10502394331027995967, 2214592511, 617765807475093098940330095, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, 2596148429267413814265248164610047, 77885086703322528542658193289904127, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, 113078212145816597093331040047546785012958969400039613319782796882727665663, 6739986666787659948666753771754907668409286105635143118626635120639, 1180591620717411303423, 20769108360719301160456926135320575, 115792089237316195322646946095942657534798514674553687295163319231811575349247, 115792089237316195423570985008687907853269984665640561604477854675838770866111, 115792089237316195423570984728079593485736624370533076157931244233974081388543, 115792089237316118290544860577154681839089552289835642973713882433857035173887, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, 356811923176489970264571492362109901305020415, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, 52656145834278593348959013841835216159447547700274555627155488767, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, 1073741823, False, False, False, False, False]

def _(i):
    if i>=0x030000:
        if (i<0x0e0000):
            return False
        elif i>=0x0f0000:
            return (i%65536)<0xfffe
        else:
            return (i==0x0e0001) | (0x0e0020<=i<=0x0e007f) | (0x0e0100<=i<=0x0e01ef)
    else:
        b = i//256
        if type(ISWORD[b])==type(True):
            return ISWORD[b]
        else:
            return ISWORD[b] & (1<<(i%256)) != 0


def isword(str):
    for c in str:
        if not(_(ord(c))):
            return False

    return True


def tst(strt,len):
    start = ticks_ms()
    c=0
    for i in range(strt,strt+len,1):
        if isword(chr(i)):
            c=c+1
    return c
    end = ticks_ms()
    return (c, end-start, (end-start)/len)


def tst_(strt,len):
    start = ticks_ms()
    c=0
    for i in range(strt,strt+len,1):
        if _(i):
            c=c+1
    end = ticks_ms()
    return (c, end-start, (end-start)/len)


def tstPlanes(fulltest=True):
    return tst_(0, 1+(0x10ffff if fulltest else 0x02ffff))


